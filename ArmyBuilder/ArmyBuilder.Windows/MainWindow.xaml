<controls:MetroWindow x:Class="ArmyBuilder.Windows.MainWindow" 
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                      xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls" 
                      xmlns:views="clr-namespace:ArmyBuilder.Windows.Views" 
                      xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions" 
                      xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
                      xmlns:models="clr-namespace:ArmyBuilder.Core.Models;assembly=ArmyBuilder.Core" 
                      xmlns:core="clr-namespace:ArmyBuilder.Core;assembly=ArmyBuilder.Core"
                      xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                      xmlns:views1="clr-namespace:ArmyBuilder.UWP.Views"
                      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                      SaveWindowPosition="True"
                      DataContext="{StaticResource MainViewModel}" 
                      WindowTitleBrush="White" TitleAlignment="Left"
                      TitleForeground="Black"
                      
                      WindowStartupLocation="CenterScreen" mc:Ignorable="d" Title="{Binding SelectedArmyList.Name, FallbackValue='Armybuilder', TargetNullValue='Armybuilder'}" Height="800" Width="1200" >
    <controls:MetroWindow.WindowCloseButtonStyle>
        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MetroWindowButtonStyle}">
            <Setter Property="Foreground" Value="Black"/>
            <Style.Triggers>

                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#EB2F2F" />
                    <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#7C0000" />
                </Trigger>

            </Style.Triggers>
        </Style>
    </controls:MetroWindow.WindowCloseButtonStyle>
    <controls:MetroWindow.RightWindowCommands>
        <controls:WindowCommands>
            <Button Margin="50,0,0,0" Content="Create List" Command="{Binding AddListCommand}"/>
            <Button Content="Save List"  IsEnabled="{Binding SelectedArmyList, Converter={StaticResource NullToBoolConverter}}"  Command="{Binding SaveListCommand}" CommandParameter="{Binding SelectedArmyList}"/>
            <Button Content="Delete List"  IsEnabled="{Binding SelectedArmyList, Converter={StaticResource NullToBoolConverter}}" Command="{Binding RemoveListCommand}" CommandParameter="{Binding SelectedArmyList}"/>
            <Button Content="Add Detachment" x:Name="AddDetachmentButton" IsEnabled="{Binding SelectedArmyList, Converter={StaticResource NullToBoolConverter}}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <ei:ChangePropertyAction TargetObject="{Binding ElementName=DetachmentsPopup}" PropertyName="IsOpen" Value="True"/>
                </i:EventTrigger>
                    </i:Interaction.Triggers>
            </Button>
            <Button Content="Delete Detachment" IsEnabled="{Binding ArmyListEditor.SelectedDetachment, Converter={StaticResource NullToBoolConverter}}" Command="{Binding ArmyListEditor.RemoveDetachmentCommand}"/>
            <Button Content="Delete Unit" IsEnabled="{Binding ArmyListEditor.SelectedUnit, Converter={StaticResource NullToBoolConverter}}" Command="{Binding ArmyListEditor.RemoveUnitCommand}"/>
        </controls:WindowCommands>
    </controls:MetroWindow.RightWindowCommands>
    
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Click" SourceObject="{Binding ElementName=CreateListButton}">
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=ArmyListsListView}" PropertyName="Visibility" Value="Collapsed"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=ManageArmyListPanel}" PropertyName="Visibility" Value="Collapsed"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditArmyListView}" PropertyName="Visibility" Value="Visible"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditArmyListPanel}" PropertyName="Visibility" Value="Visible"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Click" SourceObject="{Binding ElementName=EditListButton}">
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=ArmyListsListView}" PropertyName="Visibility" Value="Collapsed"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=ManageArmyListPanel}" PropertyName="Visibility" Value="Collapsed"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditArmyListView}" PropertyName="Visibility" Value="Visible"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditArmyListPanel}" PropertyName="Visibility" Value="Visible"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Click" SourceObject="{Binding ElementName=BackButton}">
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=ArmyListsListView}" PropertyName="Visibility" Value="Visible"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=ManageArmyListPanel}" PropertyName="Visibility" Value="Collapsed"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditArmyListView}" PropertyName="Visibility" Value="Collapsed"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditArmyListPanel}" PropertyName="Visibility" Value="Visible"/>
        </i:EventTrigger>
        <!--<i:EventTrigger EventName="Click" SourceObject="{Binding ElementName=AddDetachmentButton}">
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=AddDetachmentMenu}" PropertyName="IsOpen" Value="True"/>
        </i:EventTrigger>-->
    </i:Interaction.Triggers>

<Grid>
        <materialDesign:DrawerHost IsLeftDrawerOpen="{Binding ElementName=MenuToggleButton, Path=IsChecked}">
            <materialDesign:DrawerHost.LeftDrawerContent>

                <DockPanel MinWidth="212">
                    <ToggleButton Style="{StaticResource MaterialDesignHamburgerToggleButton}" 
                                  DockPanel.Dock="Top"
                                  HorizontalAlignment="Right" Margin="16"
                                  IsChecked="{Binding ElementName=MenuToggleButton, Path=IsChecked, Mode=TwoWay}" />
                    <ListView ItemsSource="{Binding ArmyLists}" SelectedItem="{Binding SelectedArmyList}"/>
                </DockPanel>
            </materialDesign:DrawerHost.LeftDrawerContent>
            <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>

            </Grid.RowDefinitions>

                <materialDesign:ColorZone Padding="16" materialDesign:ShadowAssist.ShadowDepth="Depth2"
                                          Mode="PrimaryMid" >
                    <Grid>
                        <ToggleButton HorizontalAlignment="Left" Style="{StaticResource MaterialDesignHamburgerToggleButton}" IsChecked="False"
                                      x:Name="MenuToggleButton"/>


                            <TextBlock FontSize="18" HorizontalAlignment="Center" VerticalAlignment="Center"> 
                                <Run Text="{Binding ArmyListEditor.PointsUsed, Source={StaticResource MainViewModel}}"/>
                                <Run Text="of"/>
                                <Run Text="{Binding ArmyListEditor.ArmyList.PointsLimit, Source={StaticResource MainViewModel}}"/>
                                <!--<Run Text="("/>-->
                                <Run Text="{Binding ArmyListEditor.PointsRemaining, Source={StaticResource MainViewModel}, StringFormat='{}({0} remaining)'}"/>
                                <!--<Run Text="remaining)"/>-->
                            </TextBlock>

                        <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                            <Button Click="BrowseUnits_OnClick" ToolTip="Browse through a detailed view of all units and one them" Margin="5,0">
                                <materialDesign:PackIcon  Kind="Plus"/>
                            </Button>
                            <Button x:Name="EditButton" ToolTip="Edit the list points limit and name."  Margin="5,0">
                                <materialDesign:PackIcon Kind="Pencil"/>
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditPopup}" PropertyName="IsOpen" Value="True"/>

                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Button>
                        </StackPanel>
                    </Grid>
</materialDesign:ColorZone>


            <Popup Placement="Bottom" PlacementTarget="{Binding ElementName=EditButton}" StaysOpen="True" x:Name="EditPopup">
                <StackPanel>
                    <TextBox Margin="5" x:Name="EditNNameTextbox" Text="{Binding ArmyListEditor.EditListName}"/>
                    <controls:NumericUpDown Margin="5" x:Name="EditPointsTextbox" Minimum="0" Value="{Binding ArmyListEditor.EditListPoints}" />
                    <Button Content="Done" Margin="5" Command="{Binding ArmyListEditor.EditListDetailsCommand}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditPopup}" PropertyName="IsOpen" Value="False"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                </StackPanel>
            </Popup>

            <Grid x:Name="EditArmyListView" Grid.Row="1">


                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                        <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>

                    <ColumnDefinition/>
                    <ColumnDefinition/>
        
                </Grid.ColumnDefinitions>

                    <ComboBox x:Name="QuickAddCombobox" IsEditable="True" StaysOpenOnEdit="True" ItemsSource="{Binding Source={StaticResource AvailableUnitsCollection}}" Margin="5" SelectedItem="{x:Null}" materialDesign:HintAssist.Hint="Select a Unit to Add">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Selected">
                                <i:InvokeCommandAction Command="{Binding ArmyListEditor.AddUnitEntryToDetachmentCommand, Source={StaticResource MainViewModel}}" CommandParameter="{Binding SelectedItem, ElementName=QuickAddCombobox}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </ComboBox>

                <ListView SelectedItem="{Binding ArmyListEditor.SelectedDetachment}" ItemsSource="{Binding SelectedArmyList.Detachments}" Grid.Row="2" Grid.Column="0" BorderThickness="0" ItemTemplateSelector="{StaticResource DetachmentDataTemplateSelector}" />

                    <TextBlock Grid.Row="1" Grid.Column="1" Grid.RowSpan="2"  Text="{Binding ArmyListEditor.SelectedUnit.UnitEntry.Name, Source={StaticResource MainViewModel}}"/>
                <views1:UnitEditor Grid.Row="1" Grid.RowSpan="2" Grid.Column="1" DataContext="{Binding ArmyListEditor.SelectedUnit}"/>
            </Grid>
    </Grid>
    </materialDesign:DrawerHost>

        <Popup StaysOpen="True"  x:Name="DetachmentsPopup" PlacementTarget="{Binding ElementName=AddDetachmentButton}" Placement="Bottom">
        <ListView Width="200" Height="400" ItemsSource="{Binding AvailableDetachments}">
            <ListView.ItemTemplate>
                <DataTemplate DataType="models:Detachment">
                    <Button Style="{StaticResource MetroFlatButton}" Content="{Binding Name}" Command="{Binding ArmyListEditor.AddDetachmentToListCommand, Source={StaticResource MainViewModel}}" CommandParameter="{Binding}" BorderThickness="0" controls:ButtonHelper.CornerRadius="0">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <ei:ChangePropertyAction TargetObject="{Binding ElementName=DetachmentsPopup}" PropertyName="IsOpen" Value="False"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                </DataTemplate>
            </ListView.ItemTemplate>
            <ListBox.ItemContainerStyle>
                <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MetroListBoxItem}">
                    <!--<Style.Triggers>
                        --><!--Hide Groups if there are no items in them--><!--
                        <DataTrigger Binding="{Binding Detachments.Count}" Value="0">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>-->
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
                </Style>
            </ListBox.ItemContainerStyle>
        </ListView>
        </Popup>

</Grid>
</controls:MetroWindow>