<controls:MetroWindow x:Class="ArmyBuilder.Windows.MainWindow" 
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                      xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls" 
                      xmlns:views="clr-namespace:ArmyBuilder.Windows.Views" 
                      xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions" 
                      xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
                      xmlns:models="clr-namespace:ArmyBuilder.Core.Models;assembly=ArmyBuilder.Core" 
                      xmlns:core="clr-namespace:ArmyBuilder.Core;assembly=ArmyBuilder.Core"
                      xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                      xmlns:views1="clr-namespace:ArmyBuilder.UWP.Views" SaveWindowPosition="True"
                      DataContext="{StaticResource MainViewModel}" TitleAlignment="Center"
                      WindowStartupLocation="CenterScreen" mc:Ignorable="d" Title="{Binding SelectedArmyList.Name, FallbackValue='Armybuilder', TargetNullValue='Armybuilder'}" Height="800" Width="1200" >

    <controls:MetroWindow.LeftWindowCommands>
        <controls:WindowCommands>
            <Button Content="Create List" Command="{Binding AddListCommand}"/>
            <Button Content="Save List"  IsEnabled="{Binding SelectedArmyList, Converter={StaticResource NullToBoolConverter}}"  Command="{Binding SaveListCommand}" CommandParameter="{Binding SelectedArmyList}"/>
            <Button Content="Delete List"  IsEnabled="{Binding SelectedArmyList, Converter={StaticResource NullToBoolConverter}}" Command="{Binding RemoveListCommand}" CommandParameter="{Binding SelectedArmyList}"/>
            <Button Content="Add Detachment" x:Name="AddDetachmentButton" IsEnabled="{Binding SelectedArmyList, Converter={StaticResource NullToBoolConverter}}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <ei:ChangePropertyAction TargetObject="{Binding ElementName=DetachmentsPopup}" PropertyName="IsOpen" Value="True"/>
                </i:EventTrigger>
                    </i:Interaction.Triggers>
            </Button>
            <Button Content="Delete Detachment" IsEnabled="{Binding ArmyListEditor.SelectedDetachment, Converter={StaticResource NullToBoolConverter}}" Command="{Binding ArmyListEditor.RemoveDetachmentCommand}"/>
            <Button Content="Delete Unit" IsEnabled="{Binding ArmyListEditor.SelectedUnit, Converter={StaticResource NullToBoolConverter}}" Command="{Binding ArmyListEditor.RemoveUnitCommand}"/>
        </controls:WindowCommands>
    </controls:MetroWindow.LeftWindowCommands>
    
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Click" SourceObject="{Binding ElementName=CreateListButton}">
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=ArmyListsListView}" PropertyName="Visibility" Value="Collapsed"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=ManageArmyListPanel}" PropertyName="Visibility" Value="Collapsed"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditArmyListView}" PropertyName="Visibility" Value="Visible"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditArmyListPanel}" PropertyName="Visibility" Value="Visible"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Click" SourceObject="{Binding ElementName=EditListButton}">
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=ArmyListsListView}" PropertyName="Visibility" Value="Collapsed"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=ManageArmyListPanel}" PropertyName="Visibility" Value="Collapsed"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditArmyListView}" PropertyName="Visibility" Value="Visible"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditArmyListPanel}" PropertyName="Visibility" Value="Visible"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Click" SourceObject="{Binding ElementName=BackButton}">
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=ArmyListsListView}" PropertyName="Visibility" Value="Visible"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=ManageArmyListPanel}" PropertyName="Visibility" Value="Collapsed"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditArmyListView}" PropertyName="Visibility" Value="Collapsed"/>
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditArmyListPanel}" PropertyName="Visibility" Value="Visible"/>
        </i:EventTrigger>
        <!--<i:EventTrigger EventName="Click" SourceObject="{Binding ElementName=AddDetachmentButton}">
            <ei:ChangePropertyAction TargetObject="{Binding ElementName=AddDetachmentMenu}" PropertyName="IsOpen" Value="True"/>
        </i:EventTrigger>-->
    </i:Interaction.Triggers>

<Grid>
    <controls:HamburgerMenu ItemsSource="{Binding ArmyLists}" SelectedItem="{Binding SelectedArmyList}" OptionsItemTemplate="{StaticResource HamburgerMenuItemTemplate}" >

        <controls:HamburgerMenu.Content>

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                        <RowDefinition/>

                </Grid.RowDefinitions>

                    <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                        <TextBlock FontSize="36">
                    <Run Text="{Binding ArmyListEditor.PointsUsed, Source={StaticResource MainViewModel}}"/>
                    <Run Text="of"/>
                    <Run Text="{Binding ArmyListEditor.ArmyList.PointsLimit, Source={StaticResource MainViewModel}}"/>
                    <!--<Run Text="("/>-->
                    <Run Text="{Binding ArmyListEditor.PointsRemaining, Source={StaticResource MainViewModel}, StringFormat='{}({0} remaining)'}"/>
                    <!--<Run Text="remaining)"/>-->
                    </TextBlock>
                        <Button x:Name="EditButton" ToolTip="Edit the list points limit and name." Style="{StaticResource AppBarButtonStyle}" Margin="5" Height="25" Width="30">
                            <iconPacks:PackIconModern Style="{StaticResource AppBarIconStyle}" Kind="Edit" Foreground="Black" Height="Auto" Width="{Binding Height, ElementName=EditButton}" />
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditPopup}" PropertyName="IsOpen" Value="True"/>
                                    
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>
                        </StackPanel>

                    <Popup Placement="Bottom" PlacementTarget="{Binding ElementName=EditButton}" StaysOpen="True" x:Name="EditPopup">
                        <StackPanel>
                            <TextBox Margin="5" x:Name="EditNNameTextbox" Text="{Binding ArmyListEditor.EditListName}"/>
                            <controls:NumericUpDown Margin="5" x:Name="EditPointsTextbox" Minimum="0" Value="{Binding ArmyListEditor.EditListPoints}" />
                            <Button Content="Done" Margin="5" Command="{Binding ArmyListEditor.EditListDetailsCommand}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <ei:ChangePropertyAction TargetObject="{Binding ElementName=EditPopup}" PropertyName="IsOpen" Value="False"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Button>
                        </StackPanel>
                    </Popup>

                    <Grid x:Name="EditArmyListView" Grid.Row="1">
                                

                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <Expander Grid.Row="1" Grid.Column="0" ExpandDirection="Left" Header="Available Units" IsExpanded="False">
                        <Expander.HeaderTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding}">
                                    <TextBlock.LayoutTransform>
                                        <RotateTransform Angle="-90"/>
                                    </TextBlock.LayoutTransform>
                                </TextBlock>
                            </DataTemplate>
                        </Expander.HeaderTemplate>
                        <ListView x:Name="AvailableUnitsListView"   ItemsSource="{Binding Source={StaticResource AvailableUnitsCollection}}" >
                            <ListView.GroupStyle>
                                <GroupStyle>
                                    <GroupStyle.HeaderTemplate>
                                        <DataTemplate DataType="core:ForceOrgSlot">
                                            <Grid Margin="0,0,0,2" >
                                                <Border BorderThickness="0,0,0,2" BorderBrush="Black"/>
                                                <TextBlock Margin="5,0,0,2" FontSize="18" Text="{Binding Name}" />
                                                <!--<TextBlock Margin="5,0,0,2" FontSize="18" Text="{Binding Converter={StaticResource ForceOrgGroupToText}}" />-->
                                            </Grid>
                                        </DataTemplate>
                                    </GroupStyle.HeaderTemplate>
                                    <GroupStyle.ContainerStyle>
                                        <Style TargetType="{x:Type GroupItem}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Expander Header="{Binding Name}" IsExpanded="False" d:DataContext="{d:DesignInstance CollectionViewGroup}" >
                                                            <Expander.Resources>
                                                                <CollectionViewSource x:Key="HoursByProjectCollection" Source="{Binding Items}" IsLiveGroupingRequested="True" IsLiveSortingRequested="True">
                                                                    <CollectionViewSource.GroupDescriptions>
                                                                        <PropertyGroupDescription PropertyName="ForceOrgSlot" />
                                                                    </CollectionViewSource.GroupDescriptions>
                                                                </CollectionViewSource>
                                                            </Expander.Resources>
                                                            <ListView ItemsSource="{Binding Source={StaticResource HoursByProjectCollection}}">
                                                                <ListView.GroupStyle>
                                                                    <GroupStyle>
                                                                        <GroupStyle.HeaderTemplate>
                                                                            <DataTemplate DataType="{x:Type CollectionViewGroup}" >

                                                                            </DataTemplate>
                                                                        </GroupStyle.HeaderTemplate>

                                                                        <GroupStyle.ContainerStyle>
                                                                            <Style TargetType="{x:Type GroupItem}">
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate>
                                                                                            <Expander Header="{Binding Name}" IsExpanded="True" d:DataContext="{d:DesignInstance CollectionViewGroup}">

                                                                                                <ItemsPresenter  />

                                                                                            </Expander>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </GroupStyle.ContainerStyle>
                                                                    </GroupStyle >
                                                                </ListView.GroupStyle>
                                                                <ListView.ItemTemplate>
                                                                    <DataTemplate>
                                                                        <Button Content="{Binding Name}" Command="{Binding ArmyListEditor.AddUnitEntryToDetachmentCommand, Source={StaticResource MainViewModel}}" CommandParameter="{Binding}">

                                                                        </Button>
                                                                    </DataTemplate>
                                                                </ListView.ItemTemplate>
                                                            </ListView>
                                                        </Expander>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </GroupStyle.ContainerStyle>
                                </GroupStyle>
                            </ListView.GroupStyle>
                        </ListView>
                    </Expander>

                        <GroupBox Header="{Binding ArmyListEditor.CommandPoints}" HeaderStringFormat="{}List Detachments - {0} Command Points" Grid.Row="1" Grid.Column="1">
                            <ListView SelectedItem="{Binding ArmyListEditor.SelectedDetachment}" ItemsSource="{Binding SelectedArmyList.Detachments}" BorderThickness="0" ItemTemplateSelector="{StaticResource DetachmentDataTemplateSelector}" />
                    </GroupBox>

                    <TextBlock Grid.Row="1" Grid.Column="2" Text="{Binding ArmyListEditor.SelectedUnit.UnitEntry.Name, Source={StaticResource MainViewModel}}"/>
                    <views1:UnitEditor Grid.Row="1" Grid.Column="2" DataContext="{Binding ArmyListEditor.SelectedUnit}"/>
                </Grid>
            </Grid>
        </controls:HamburgerMenu.Content>
    </controls:HamburgerMenu>

        <Popup StaysOpen="True"  x:Name="DetachmentsPopup" PlacementTarget="{Binding ElementName=AddDetachmentButton}" Placement="Bottom">
        <ListView Width="200" Height="400" ItemsSource="{Binding AvailableDetachments}">
            <ListView.ItemTemplate>
                <DataTemplate DataType="models:Detachment">
                    <Button Style="{StaticResource MetroFlatButton}" Content="{Binding Name}" Command="{Binding ArmyListEditor.AddDetachmentToListCommand, Source={StaticResource MainViewModel}}" CommandParameter="{Binding}" BorderThickness="0" controls:ButtonHelper.CornerRadius="0">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <ei:ChangePropertyAction TargetObject="{Binding ElementName=DetachmentsPopup}" PropertyName="IsOpen" Value="False"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                </DataTemplate>
            </ListView.ItemTemplate>
            <ListBox.ItemContainerStyle>
                <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MetroListBoxItem}">
                    <!--<Style.Triggers>
                        --><!--Hide Groups if there are no items in them--><!--
                        <DataTrigger Binding="{Binding Detachments.Count}" Value="0">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>-->
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
                </Style>
            </ListBox.ItemContainerStyle>
        </ListView>
        </Popup>

</Grid>
</controls:MetroWindow>